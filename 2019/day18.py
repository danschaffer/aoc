#!/usr/bin/env python
import re
class Vault:
    def __init__(self, text):
        self.map = {}
        self.doors = self.keys = {}
        self.paths = {}
        self.parse_map(text.strip())

    def find_location(self, object):
        for pos in self.map:
            if self.map[pos] == object:
                return pos

    def is_key(self, object):
        return not re.search('[a-z]', object) is None

    def is_door(self, object):
        return not re.search('[A-Z]', object) is None

    def find_keys(self):
        keys = []
        for point in self.map:
            if self.is_key(self.map[point]):
                keys += [self.map[point]]
        return sorted(keys)

    def find_path(self, start, goal):
        paths = [{'loc': start, 'moves': [], 'doors': []}]
        cache = []
        doors = []
        while len(paths) > 0:
            move = paths[0]
            paths.remove(paths[0])
            if move['loc'] == goal:
                print(f"found path {self.map[start]} {self.map[goal]}")
                return move
            if self.is_door(self.map[move['loc']]):
                move['doors'] = move['doors'][:] + [self.map[move['loc']].lower()]
            cache += [move['loc']]
            moves = self.add_moves(move)
            for move in moves:
                if move['loc'] not in cache:
                    paths = paths[:] + [move]
            paths.sort(key=lambda move: len(move['moves']))

    def print_move(self, move, message=''):
        moves = move['moves']
        keys = move['keys']
        position = move['loc']
        print(f"{message} moves={moves} position={position} keys={keys}")

    def add_if_valid(self, position):
        if position['loc'] in self.map:
            return [position]
        return []

    def add_moves(self, position):
        moves = [] + \
        self.add_if_valid({'loc': (position['loc'][0] - 1, position['loc'][1]), 'moves': position['moves'] + [(position['loc'][0] - 1, position['loc'][1])], 'doors': position['doors']}) +\
        self.add_if_valid({'loc': (position['loc'][0] + 1, position['loc'][1]), 'moves': position['moves'] + [(position['loc'][0] + 1, position['loc'][1])], 'doors': position['doors']}) +\
        self.add_if_valid({'loc': (position['loc'][0], position['loc'][1] - 1), 'moves': position['moves'] + [(position['loc'][0], position['loc'][1] - 1)], 'doors': position['doors']}) +\
        self.add_if_valid({'loc': (position['loc'][0], position['loc'][1] + 1), 'moves': position['moves'] + [(position['loc'][0], position['loc'][1] + 1)], 'doors': position['doors']})
        return moves

    def map_all_keys(self):
        self.paths = {}
        keys = self.find_keys() + ['@']
        for k1 in keys:
            self.paths[k1] = {}
            for k2 in keys:
                if k1 == k2:
                    continue
                self.paths[k1][k2] = self.find_path(self.find_location(k1), self.find_location(k2))

    def update_keys(self, path, keys_left):
        keys = []
        for key in path['doors']:
            if key in keys_left:
                keys += [key]
        path['doors'] = keys

    def run(self):
        current = '@'
        keys = self.find_keys()
        self.map_all_keys()
        moves = []
        keys_left = keys[:]
        while len(keys_left) > 0:
            paths = []
            for key in keys_left:
                paths += [self.paths[current][key]]
            for path in paths:
                self.update_keys(path, keys_left)
            paths.sort(key=lambda e: (len(e['doors']), len(e['moves'])))
            move = paths[0]
            keys_left.remove(self.map[move['loc']])
            moves += move['moves']
            current = self.map[moves[-1]]
            print(f"{current} {moves}")
        return len(moves)

    def parse_map(self, text):
        y = 0
        for line in text.split('\n'):
            x = 0
            for item in list(line):
                if re.search('[A-Za-z.@]', item):
                    self.map[(x,y)] = item
                x += 1
            y += 1


def test_1():
    vault = Vault("""
#########
#b.A.@.a#
#########
""")
    assert vault.is_door('@') is False
    assert vault.is_key('@') is False
    assert vault.find_location('@') == (5, 1)
    assert vault.find_location('a') == (7, 1)
    path = vault.find_path(vault.find_location('@'), vault.find_location('a'))
    assert path['doors'] == []
    assert path['moves'] == [(6,1), (7,1)]
    path = vault.find_path(vault.find_location('@'), vault.find_location('b'))
    assert path['doors'] == ['a']
    assert path['moves'] == [(4,1), (3,1), (2,1), (1,1)]
    assert vault.find_keys() == ['a', 'b']
    assert vault.run() == 8

def test_2():
    vault = Vault("""
########################
#f.D.E.e.C.b.A.@.a.B.c.#
######################.#
#d.....................#
########################
""")
    result = vault.run()
    assert result == 86

#
#     def test_3(self):
#         vault = Vault("""
# #################
# #i.G..c...e..H.p#
# ########.########
# #j.A..b...f..D.o#
# ########@########
# #k.E..a...g..B.n#
# ########.########
# #l.F..d...h..C.m#
# #################
# """)
#         result = vault.run()
#         assert result == 132


if __name__ == '__main__':
    vault = Vault("""
#################################################################################
#..f....#...........#.....#.........#m..#.........#.#.......#...............#...#
#.#.###.#########.#.#.###.#.#.#####.#.#.#Q#.#####.#.#.###.###.#V#####.#####.#.#C#
#.#...#...........#t#.#.#...#.#...#.#.#.#.#.#.......#.#.#.....#.....#.#...#...#.#
#####.###############.#.#####.#.#.###.#.#.#.#########.#.###########.###.#.#####.#
#.....#...............#...#.#...#...#.#.#.#.........#.#...........#.....#.#...#e#
#.###.#.###############.#.#.#######.#I#.#.#########.#.###########.#####.#.#.#.#.#
#...#.#...#.....#.......#.....#.G.#.#.#.#.#.......#.#.....#.......#...#.#...#.#.#
###.#.###.#.#.#.###.###########.#.#.#.#.#.#####.#.#.#####.#.#.#####.#.#######.#.#
#...#.#...#.#.#...#.#...#.....#b#.#...#.#.......#.#.........#.#.....#.#...#...#.#
#.#####.###.#.###.#.#.#.#.###.#.#.#####.#########.#############.#####.#.#.#.###.#
#.......#.#.#...#.Z.#.#.B.#.....#.....#.#.......#.....#.........#.#.....#...#...#
#.#######.#.###.#####.#.#############.#M#.#.#########.#.#########.#.#############
#.#.......#...#.#.....#u#...K.......#.#.#.#...........#...#.........#...........#
#.###.###.#.###.#.#####.#.#####.###.#.#.#.#############.#.#.#########.#########.#
#...#...#...#...#.U.#...#.#..j#...#.#g..#.......#...R.#.#.#.....#.....#.......#.#
###.#######.#.#####.#####.#.#.###.#.#############.###.#.#.#######.#########.###.#
#.#.......#.#.....#..k....#.#.#d..#.#...#.........#...#.#.........#.#.......#...#
#.#######.#.#####.#####.###.#.#####.#.#.#.#########.###.#########.#.#.#.#####.#.#
#.....#...#.#.....#.H.#.#...#.S...#.D.#.#...#.....#.#...#.#.....#.#...#..a#...#.#
#.#.#.#.#####.#####.#.#.#.#######.#####.###.#.###.#.###.#.#.###.#.#.#####.#.###.#
#.#.#.#...#...#...#.#.#.#.#.....#.....#s#...#...#.#...#...#...#.#.#...#...#.#...#
###.#.###.#.###.#.#.#####J###.#######.#.#.#######.###.###.#####.#.#.###.#.#.#.###
#...#.#...#.#...#.#.#.....#...#.....#...#.#...#.....#.#...#...#.#.#.#...#.#.#...#
#.#####.###.#.###.#.###.###.###.#.#.#####.#.#.#.###.#.###.###.#.#.###.###.#.###.#
#.....#...#...#...#....h#...#...#.#.#...#...#.#.#.#.#...#.....#.#.....#...#.#.#.#
#.###.###.#.###.###########.#.###.#.###.#####.#.#.#.###.#######.#######.###.#.#.#
#.#.#.....#.#...#.....#...#...#.#.#.....#...#...#...#.#...#.....#.......#.#.#..p#
#.#.#########.###.#.#.#.#.###.#.#.#####.#.#######.###.###.#.###########.#.#.###.#
#.#.#.......#.....#.#...#...#...#.#...#.#.......#.#.#...#.#.......#...#.#.#...#.#
#.#.#.###.#.#.#####.#######.#####.###.#.#.#####.#.#.#.#.#.#######.#.#.#.#.###.#.#
#.#...#...#.#.....#.......#.....#...#...#.....#.#.#...#.#...#...#...#.#.#.#...#.#
#.#####.###.#####.#######.#####.###.#.###.#####.#.#####.#.###.#.#####.#.#.#.###.#
#...N.#.#.#.#.....#.......#...#.....#.#.#.#...#.#.......#.....#.......#...#...#.#
#####.#.#.#.#.#####.#######.#########.#.###.#.#.#######.#####################.#.#
#...#...#...#.....#.......#.#...#.....#.#...#.....#...X.#.....Y.#...#...W.....#.#
###.#####.#######.#######.#.#.#.#.#####.#.#########.#########.#.###.#.#.#######.#
#...#.....#...#.....#...#.#.#.#...#.....#.#.....#...#...#...#.#...#...#.#.#.....#
#.###.#####.#.#######.#.#.#.#.#######.#.#.#.###.#.###.#.#.#.#.###.#####.#.#.#####
#.........A.#.........#...#..x........#.......#.......#...#...#.........#.......#
#######################################.@.#######################################
#.O.......#.............#.......#.....................#...........#...#...#.#...#
###.#####.#######.#####.###.#.#.#.#####.#.#.#########.#######.###.#.#.#.#.#.#.#.#
#...#...#.......#.#..y....#.#.#.#.#...#.#.#.#.....#.........#...#.#.#...#.#.#.#.#
#.#####.#######.#.#.#####.###.#.#.#.#.#.###.#.###.#########.###.#.#.#####.#.#.#.#
#.#...#.......#.#.#.#...#.....#...#.#.#.#...#...#...#.....#.....#.#...#.#.#...#.#
#.#.#.#####.###.#.###.#.#############.#.#.#####.###.#.###.#######.###.#.#.#####.#
#..r#.#...#.....#.#.L.#.#...#...#.....#.#.........#.#.#...#.....#.....#.#.#..n..#
#####.#.#.###.###.#.###.#.#.#.#.###.###.#.#######.#.#.#.###.###.#######.#.#.#####
#...#...#...#..w..#.#.#.#.#.#.#...#...#.#...#...#.#...#...#.#...#.....#...#.....#
#.#.#######.#######.#.#.#.#.#.###.###.#.###.#.#.#######.#.#.#.#####.###.###.###.#
#.#...#...#.....#...#.#...#.....#...#.#.#.#.#.#.......#.#...#.#...#.#...#...#...#
###.#.#.#######.#.###.#########.###.#.#.#.#.#.#######.#.#####.#.#.#.#.#####.#.###
#...#...#...#.P.#.#...#.#.....#.#...#.#.#...#.#.#...#.#...#o#...#.#...#...#.#...#
#.#####.#.#.#.###.#.#.#.#.###.###.###.#.#.###.#.#.#.#.###.#.#####.#.###.#.#.###.#
#.....#.#.#.#.....#.#...#...#.....#...#.#...#.#...#.#.#.....#.....#.#...#.#...#.#
#.###.#.#.#.#######.#######.#########.#.#####.#.###.#.#.#####.#####.#.###.#.###.#
#.#.#.#.#.#...#.#.....#.....#...#...#.#.#.....#.#.#.#.#.#.....#...#.#...#.#.#...#
#.#.#.###.#.#.#.#.###.#.#####.#.#.#.#.#.#.#####.#.#.#.###.#####.###.###.#.###.###
#.#.#.E...#.#.#...#...#...#...#...#...#.#.....#.#.#.......#.........#..l#...#...#
#.#.#######.#.#####.###.#.#.#.#####.###.#####.#.#.#########.###.#####.#####.###.#
#.#.......#.#.....#.#.#.#.#.#.#...#.#...#.....#.#.#.....#...#.#.#...#.#...#.....#
#.#.#####.#.#####.#.#.#.#.###.#.#.###.###.#####.#.#.###.#####.#.#.#.#.###.#####.#
#.#.#.....#.#.......#.#.#.#...#.#.#...#.#.#.....#.#.#.#.....#.#...#...#...#.....#
#.#.#.#####.#.#######.#.#.#.###.#.#.###.#.#.#####.#.#.#####.#.#########.###.#####
#.#.#...#...#.#..q#...#.#.#.....#.#.#...#.#.#.....#.#.....#.#.......#...#...#...#
#.#.#.###.###.#.#.#.#####.#.#####.#.###.#.#.#.#.###.###.#.#.#######.#.#.#.#####.#
#.#.#.#...#.#...#.#.......#.....#.#...#.#.#...#.#v..#...#.#...#.....#.#.#.#...#.#
#.#.#.#.###.#.#################.#.###.#.#.###.###.###.#######.#.#####.###.#.#.#.#
#...#.#...#...#.............#...#...#.#.#...#.#...#.........#...#.......#...#...#
#.#####.#.#####.#.###########.#####.#.#.#.#.###.###########.#####.#####.#######.#
#.#...#.#.#.....#.....#.......#.....#.#.#.#...#.#...............#.#...#.......#.#
###.#.###.#.#########.#.#######.#####.#.#.###.#.#.#.#############.###.#####.###.#
#...#...#.#.#.........#.#.....#.....#.#.#.#...#.#.#....c..........#.....#.#.....#
#.#####.#.#.#.#########.#.#.#.#####.#.#.###.###.#.#################.###.#.#######
#.....#...#z#.......#...#.#.#...#.#.#.#.#...#...#.....#.....#...#...#.#.#.......#
#.###.#####.#######.#.###.#.###.#.#.#.#.#.###.#######.###.#.#.#.#.###.#.#T#.###.#
#...#.....#...#...#...#...#...#...#.#.#.#...#.#...#...#...#.#.#...#.#...#.#.#.#.#
###.#####.###.#.#.###########.###.#.#.#.#.#.#.#.###.###.###.#.#####.#F#####.#.#.#
#.......#.......#.............#...#.....#.#...#.........#.....#.............#i..#
#################################################################################""")
    result = vault.run()
    print(result)
