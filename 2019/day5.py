#!/usr/bin/env python


class Intcode:
    '''
        ABCDE
        DE two digit opcode
        C mode of 1st parameter
        B mode of 2nd parameter
        A mode of 3rd parameter
        0 position mode (default if omitted)
        1 immediate mode

        opcodes
        01 - adds p1 + p2 put result in p3
        02 - multiplys p1 * p2 puts result in p3
        03 - input to p1
        04 - outputs from p1

        inputs get popped from inputs
        outputs pushes to outputs
    '''
    def __init__(self, data, inputs=[1], isdebug=False):
        self.data = data
        self.pointer = 0
        self.inputs = inputs
        self.outputs = []
        self.isdebug = isdebug

    def run_until_halt(self):
        while self.run():
            True

    def debug(self, message):
        if self.isdebug:
            print(message)
#            import pdb; pdb.set_trace()

    def run(self):
        instruction_s = str(self.data[self.pointer])
        p1 = 'pos'
        p2 = 'pos'
        p3 = 'pos'
        assert len(instruction_s) > 0
        assert len(instruction_s) < 6
        if len(instruction_s) <= 2:
            instruction = int(instruction_s)
        elif len(instruction_s) == 3:
            instruction = int(instruction_s[1:])
            if instruction_s[0] == '1':
                p1 = 'imm'
        elif len(instruction_s) == 4:
            instruction = int(instruction_s[2:])
            if instruction_s[1] == '1':
                p1 = 'imm'
            if instruction_s[0] == '1':
                p2 = 'imm'
        elif len(instruction_s) == 5:
            instruction = int(instruction_s[3:])
            if instruction_s[2] == '1':
                p1 = 'imm'
            if instruction_s[1] == '1':
                p2 = 'imm'
            if instruction_s[0] == '1':
                p3 = 'imm'
        assert instruction in [1, 2, 3, 4, 5, 6, 7, 8, 99], f"unknown instruction {instruction}"
        # 99 = halt
        if instruction == 99:
            self.debug("halt(99)")
            return False
        # 3 = input
        if instruction == 3:
            input = self.inputs.pop()
            out = self.data[self.pointer + 1]
            self.data[out] = input
            self.pointer += 2
            self.debug(f"input(3) {instruction_s} pos={out} input={input}")
            return True
        # 4 = output
        elif instruction == 4:
            out = self.data[self.pointer + 1]
            if p1 == 'imm':
                val = out
            else:
                val = self.data[out]
            print(f"{val}")
            self.outputs += [val]
            self.pointer += 2
            self.debug(f"output(4) {instruction_s} pos={out} output={val}")
            return True
        # 5 = jump-if-true
        elif instruction == 5:
            param1 = self.data[self.pointer + 1]
            if p1 == 'pos':
                param1 = self.data[param1]
            in2 = self.data[self.pointer + 2]
            if p2 == 'pos':
                in2 = self.data[in2]
            self.debug(f"jump-if-true(5) {self.data[self.pointer]} {self.data[self.pointer +1]} {self.data[self.pointer+2]} pointer={self.pointer}")
            if param1 != 0:
                self.pointer = in2
            else:
                self.pointer += 3
        # 6 = jump-if-false
            return True
        elif instruction == 6:
            param1 = self.data[self.pointer + 1]
            if p1 == 'pos':
                param1 = self.data[param1]
            in2 = self.data[self.pointer + 2]
            if p2 == 'pos':
                in2 = self.data[in2]
            self.debug(f"jump-if-false(6) {self.data[self.pointer]} {self.data[self.pointer +1]} {self.data[self.pointer+2]} pointer={self.pointer}")
            if param1 == 0:
                self.pointer = in2
            else:
                self.pointer += 3
            return True
        # 7 = less than
        elif instruction == 7:
            in1 = self.data[self.pointer + 1]
            if p1 == 'imm':
                val1 = int(in1)
            else:
                val1 = self.data[in1]
            in2 = self.data[self.pointer + 2]
            if p2 == 'imm':
                val2 = int(in2)
            else:
                val2 = self.data[in2]
            val3 = self.data[self.pointer + 3]
            if val1 < val2:
                self.data[val3] = 1
            else:
                self.data[val3] = 0
            self.debug(f"less-than(7) {self.data[self.pointer]} {self.data[self.pointer +1]} {self.data[self.pointer+2]} {self.data[self.pointer+3]}")
            self.pointer += 4
            return True
        # 8 = equals
        elif instruction == 8:
            in1 = self.data[self.pointer + 1]
            if p1 == 'imm':
                val1 = int(in1)
            else:
                val1 = self.data[in1]
            in2 = self.data[self.pointer + 2]
            if p2 == 'imm':
                val2 = int(in2)
            else:
                val2 = self.data[in2]
            val3 = self.data[self.pointer + 3]
            if val1 == val2:
                self.data[val3] = 1
            else:
                self.data[val3] = 0
            self.debug(f"equals(8) {self.data[self.pointer]} {self.data[self.pointer +1]} {self.data[self.pointer+2]} {self.data[self.pointer+3]}")
            self.pointer += 4
            return True
        # 1 == add, 2 == mult
        elif instruction == 1 or instruction == 2:
            in1 = self.data[self.pointer + 1]
            if p1 == 'imm':
                val1 = int(in1)
            else:
                val1 = self.data[in1]
            in2 = self.data[self.pointer + 2]
            if p2 == 'imm':
                val2 = int(in2)
            else:
                val2 = self.data[in2]
            assert p3 == 'pos'
            out = self.data[self.pointer + 3]
            if instruction == 1:
                self.data[out] = val1 + val2
            elif instruction == 2:
                self.data[out] = val1 * val2
            if instruction == 1:
                self.debug(f"add(1) {self.data[self.pointer]} {self.data[self.pointer +1]} {self.data[self.pointer+2]} {self.data[self.pointer+3]}")
            else:
                self.debug(f"mult(2) {self.data[self.pointer]} {self.data[self.pointer +1]} {self.data[self.pointer+2]} {self.data[self.pointer+3]}")
            self.pointer += 4
            return True


def test_internal1():
    intcode = Intcode([1002, 5, 2, 5, 99, 33], [])  # multiply pos 5 (33) * 2, place in 5 (66)
    intcode.run_until_halt()
    assert(intcode.data[5] == 66)

    intcode = Intcode([101, 100, 5, 5, 99, 33])  # add pos 5 (33) + 100, place in 5 (133)
    intcode.run_until_halt()
    assert(intcode.data[5] == 133)

def test_in_out():
    intcode = Intcode([4, 3, 99, 10])
    intcode.run_until_halt()
    assert intcode.outputs == [10]

def test_equals():
    intcode = Intcode([3,9,8,9,10,9,4,9,99,-1,8], [8])
    intcode.run_until_halt()
    assert intcode.outputs == [1]

    intcode = Intcode([3,9,8,9,10,9,4,9,99,-1,8], [9])
    intcode.run_until_halt()
    assert intcode.outputs == [0]

    intcode = Intcode([3,9,7,9,10,9,4,9,99,-1,8], [7])
    intcode.run_until_halt()
    assert intcode.outputs == [1]

    intcode = Intcode([3,9,7,9,10,9,4,9,99,-1,8], [8])
    intcode.run_until_halt()
    assert intcode.outputs == [0]

    intcode = Intcode([3,3,1108,-1,8,3,4,3,99], [8])
    intcode.run_until_halt()
    assert intcode.outputs == [1]

    intcode = Intcode([3,3,1108,-1,8,3,4,3,99], [9])
    intcode.run_until_halt()
    assert intcode.outputs == [0]

    intcode = Intcode([3,3,1107,-1,8,3,4,3,99], [7])
    intcode.run_until_halt()
    assert intcode.outputs == [1]

    intcode = Intcode([3,3,1107,-1,8,3,4,3,99], [8])
    intcode.run_until_halt()
    assert intcode.outputs == [0]


def test_jump():
    intcode = Intcode([3,12,6,12,15,1,13,14,13,4,13,99,-1,0,1,9], [0])
    intcode.run_until_halt()
    assert intcode.outputs == [0]

    intcode = Intcode([3,12,6,12,15,1,13,14,13,4,13,99,-1,0,1,9], [2])
    intcode.run_until_halt()
    assert intcode.outputs == [1]

    intcode = Intcode([3,3,1105,-1,9,1101,0,0,12,4,12,99,1], [0])
    intcode.run_until_halt()
    assert intcode.outputs == [0]

    intcode = Intcode([3,3,1105,-1,9,1101,0,0,12,4,12,99,1], [2])
    intcode.run_until_halt()
    assert intcode.outputs == [1]

def test_larger():
    intcode = Intcode([3,21,1008,21,8,20,1005,20,22,107,8,21,20,1006,20,31,1106,0,36,98,0,0,1002,21,125,20,4,20,1105,1,46,104,999,1105,1,46,1101,1000,1,20,4,20,1105,1,46,98,99], [7])
    intcode.run_until_halt()
    assert intcode.outputs == [999]

    intcode = Intcode([3,21,1008,21,8,20,1005,20,22,107,8,21,20,1006,20,31,1106,0,36,98,0,0,1002,21,125,20,4,20,1105,1,46,104,999,1105,1,46,1101,1000,1,20,4,20,1105,1,46,98,99], [8])
    intcode.run_until_halt()
    assert intcode.outputs == [1000]

    intcode = Intcode([3,21,1008,21,8,20,1005,20,22,107,8,21,20,1006,20,31,1106,0,36,98,0,0,1002,21,125,20,4,20,1105,1,46,104,999,1105,1,46,1101,1000,1,20,4,20,1105,1,46,98,99], [9])
    intcode.run_until_halt()
    assert intcode.outputs == [1001]

def test_jump_if_true():
    intcode = Intcode([1005,1,6,104,0,99,4,1,99])
    intcode.run_until_halt()
    assert intcode.outputs == [1]

def test_part1():
    input = [3,225,1,225,6,6,1100,1,238,225,104,0,1101,65,39,225,2,14,169,224,101,-2340,224,224,4,224,1002,223,8,223,101,7,224,224,1,224,223,223,1001,144,70,224,101,-96,224,224,4,224,1002,223,8,223,1001,224,2,224,1,223,224,223,1101,92,65,225,1102,42,8,225,1002,61,84,224,101,-7728,224,224,4,224,102,8,223,223,1001,224,5,224,1,223,224,223,1102,67,73,224,1001,224,-4891,224,4,224,102,8,223,223,101,4,224,224,1,224,223,223,1102,54,12,225,102,67,114,224,101,-804,224,224,4,224,102,8,223,223,1001,224,3,224,1,224,223,223,1101,19,79,225,1101,62,26,225,101,57,139,224,1001,224,-76,224,4,224,1002,223,8,223,1001,224,2,224,1,224,223,223,1102,60,47,225,1101,20,62,225,1101,47,44,224,1001,224,-91,224,4,224,1002,223,8,223,101,2,224,224,1,224,223,223,1,66,174,224,101,-70,224,224,4,224,102,8,223,223,1001,224,6,224,1,223,224,223,4,223,99,0,0,0,677,0,0,0,0,0,0,0,0,0,0,0,1105,0,99999,1105,227,247,1105,1,99999,1005,227,99999,1005,0,256,1105,1,99999,1106,227,99999,1106,0,265,1105,1,99999,1006,0,99999,1006,227,274,1105,1,99999,1105,1,280,1105,1,99999,1,225,225,225,1101,294,0,0,105,1,0,1105,1,99999,1106,0,300,1105,1,99999,1,225,225,225,1101,314,0,0,106,0,0,1105,1,99999,108,226,226,224,102,2,223,223,1005,224,329,101,1,223,223,1107,226,677,224,1002,223,2,223,1005,224,344,101,1,223,223,8,226,677,224,102,2,223,223,1006,224,359,101,1,223,223,108,677,677,224,1002,223,2,223,1005,224,374,1001,223,1,223,1108,226,677,224,1002,223,2,223,1005,224,389,101,1,223,223,1007,677,677,224,1002,223,2,223,1006,224,404,1001,223,1,223,1108,677,677,224,102,2,223,223,1006,224,419,1001,223,1,223,1008,226,677,224,102,2,223,223,1005,224,434,101,1,223,223,107,677,677,224,102,2,223,223,1006,224,449,1001,223,1,223,1007,226,677,224,102,2,223,223,1005,224,464,101,1,223,223,7,677,226,224,102,2,223,223,1005,224,479,101,1,223,223,1007,226,226,224,102,2,223,223,1005,224,494,101,1,223,223,7,677,677,224,102,2,223,223,1006,224,509,101,1,223,223,1008,677,677,224,1002,223,2,223,1006,224,524,1001,223,1,223,108,226,677,224,1002,223,2,223,1006,224,539,101,1,223,223,8,226,226,224,102,2,223,223,1006,224,554,101,1,223,223,8,677,226,224,102,2,223,223,1005,224,569,1001,223,1,223,1108,677,226,224,1002,223,2,223,1006,224,584,101,1,223,223,1107,677,226,224,1002,223,2,223,1005,224,599,101,1,223,223,107,226,226,224,102,2,223,223,1006,224,614,1001,223,1,223,7,226,677,224,102,2,223,223,1005,224,629,1001,223,1,223,107,677,226,224,1002,223,2,223,1005,224,644,1001,223,1,223,1107,677,677,224,102,2,223,223,1006,224,659,101,1,223,223,1008,226,226,224,1002,223,2,223,1006,224,674,1001,223,1,223,4,223,99,226]
    intcode = Intcode(input, [1])
    intcode.run_until_halt()
    assert intcode.outputs == [0,0,0,0,0,0,0,0,0,15386262]

def test_part2():
    input = [3,225,1,225,6,6,1100,1,238,225,104,0,1101,65,39,225,2,14,169,224,101,-2340,224,224,4,224,1002,223,8,223,101,7,224,224,1,224,223,223,1001,144,70,224,101,-96,224,224,4,224,1002,223,8,223,1001,224,2,224,1,223,224,223,1101,92,65,225,1102,42,8,225,1002,61,84,224,101,-7728,224,224,4,224,102,8,223,223,1001,224,5,224,1,223,224,223,1102,67,73,224,1001,224,-4891,224,4,224,102,8,223,223,101,4,224,224,1,224,223,223,1102,54,12,225,102,67,114,224,101,-804,224,224,4,224,102,8,223,223,1001,224,3,224,1,224,223,223,1101,19,79,225,1101,62,26,225,101,57,139,224,1001,224,-76,224,4,224,1002,223,8,223,1001,224,2,224,1,224,223,223,1102,60,47,225,1101,20,62,225,1101,47,44,224,1001,224,-91,224,4,224,1002,223,8,223,101,2,224,224,1,224,223,223,1,66,174,224,101,-70,224,224,4,224,102,8,223,223,1001,224,6,224,1,223,224,223,4,223,99,0,0,0,677,0,0,0,0,0,0,0,0,0,0,0,1105,0,99999,1105,227,247,1105,1,99999,1005,227,99999,1005,0,256,1105,1,99999,1106,227,99999,1106,0,265,1105,1,99999,1006,0,99999,1006,227,274,1105,1,99999,1105,1,280,1105,1,99999,1,225,225,225,1101,294,0,0,105,1,0,1105,1,99999,1106,0,300,1105,1,99999,1,225,225,225,1101,314,0,0,106,0,0,1105,1,99999,108,226,226,224,102,2,223,223,1005,224,329,101,1,223,223,1107,226,677,224,1002,223,2,223,1005,224,344,101,1,223,223,8,226,677,224,102,2,223,223,1006,224,359,101,1,223,223,108,677,677,224,1002,223,2,223,1005,224,374,1001,223,1,223,1108,226,677,224,1002,223,2,223,1005,224,389,101,1,223,223,1007,677,677,224,1002,223,2,223,1006,224,404,1001,223,1,223,1108,677,677,224,102,2,223,223,1006,224,419,1001,223,1,223,1008,226,677,224,102,2,223,223,1005,224,434,101,1,223,223,107,677,677,224,102,2,223,223,1006,224,449,1001,223,1,223,1007,226,677,224,102,2,223,223,1005,224,464,101,1,223,223,7,677,226,224,102,2,223,223,1005,224,479,101,1,223,223,1007,226,226,224,102,2,223,223,1005,224,494,101,1,223,223,7,677,677,224,102,2,223,223,1006,224,509,101,1,223,223,1008,677,677,224,1002,223,2,223,1006,224,524,1001,223,1,223,108,226,677,224,1002,223,2,223,1006,224,539,101,1,223,223,8,226,226,224,102,2,223,223,1006,224,554,101,1,223,223,8,677,226,224,102,2,223,223,1005,224,569,1001,223,1,223,1108,677,226,224,1002,223,2,223,1006,224,584,101,1,223,223,1107,677,226,224,1002,223,2,223,1005,224,599,101,1,223,223,107,226,226,224,102,2,223,223,1006,224,614,1001,223,1,223,7,226,677,224,102,2,223,223,1005,224,629,1001,223,1,223,107,677,226,224,1002,223,2,223,1005,224,644,1001,223,1,223,1107,677,677,224,102,2,223,223,1006,224,659,101,1,223,223,1008,226,226,224,1002,223,2,223,1006,224,674,1001,223,1,223,4,223,99,226]
    intcode = Intcode(input, [5])
    intcode.run_until_halt()
    assert intcode.outputs == [10376124]

if __name__ == '__main__':
    input = [3,225,1,225,6,6,1100,1,238,225,104,0,1101,65,39,225,2,14,169,224,101,-2340,224,224,4,224,1002,223,8,223,101,7,224,224,1,224,223,223,1001,144,70,224,101,-96,224,224,4,224,1002,223,8,223,1001,224,2,224,1,223,224,223,1101,92,65,225,1102,42,8,225,1002,61,84,224,101,-7728,224,224,4,224,102,8,223,223,1001,224,5,224,1,223,224,223,1102,67,73,224,1001,224,-4891,224,4,224,102,8,223,223,101,4,224,224,1,224,223,223,1102,54,12,225,102,67,114,224,101,-804,224,224,4,224,102,8,223,223,1001,224,3,224,1,224,223,223,1101,19,79,225,1101,62,26,225,101,57,139,224,1001,224,-76,224,4,224,1002,223,8,223,1001,224,2,224,1,224,223,223,1102,60,47,225,1101,20,62,225,1101,47,44,224,1001,224,-91,224,4,224,1002,223,8,223,101,2,224,224,1,224,223,223,1,66,174,224,101,-70,224,224,4,224,102,8,223,223,1001,224,6,224,1,223,224,223,4,223,99,0,0,0,677,0,0,0,0,0,0,0,0,0,0,0,1105,0,99999,1105,227,247,1105,1,99999,1005,227,99999,1005,0,256,1105,1,99999,1106,227,99999,1106,0,265,1105,1,99999,1006,0,99999,1006,227,274,1105,1,99999,1105,1,280,1105,1,99999,1,225,225,225,1101,294,0,0,105,1,0,1105,1,99999,1106,0,300,1105,1,99999,1,225,225,225,1101,314,0,0,106,0,0,1105,1,99999,108,226,226,224,102,2,223,223,1005,224,329,101,1,223,223,1107,226,677,224,1002,223,2,223,1005,224,344,101,1,223,223,8,226,677,224,102,2,223,223,1006,224,359,101,1,223,223,108,677,677,224,1002,223,2,223,1005,224,374,1001,223,1,223,1108,226,677,224,1002,223,2,223,1005,224,389,101,1,223,223,1007,677,677,224,1002,223,2,223,1006,224,404,1001,223,1,223,1108,677,677,224,102,2,223,223,1006,224,419,1001,223,1,223,1008,226,677,224,102,2,223,223,1005,224,434,101,1,223,223,107,677,677,224,102,2,223,223,1006,224,449,1001,223,1,223,1007,226,677,224,102,2,223,223,1005,224,464,101,1,223,223,7,677,226,224,102,2,223,223,1005,224,479,101,1,223,223,1007,226,226,224,102,2,223,223,1005,224,494,101,1,223,223,7,677,677,224,102,2,223,223,1006,224,509,101,1,223,223,1008,677,677,224,1002,223,2,223,1006,224,524,1001,223,1,223,108,226,677,224,1002,223,2,223,1006,224,539,101,1,223,223,8,226,226,224,102,2,223,223,1006,224,554,101,1,223,223,8,677,226,224,102,2,223,223,1005,224,569,1001,223,1,223,1108,677,226,224,1002,223,2,223,1006,224,584,101,1,223,223,1107,677,226,224,1002,223,2,223,1005,224,599,101,1,223,223,107,226,226,224,102,2,223,223,1006,224,614,1001,223,1,223,7,226,677,224,102,2,223,223,1005,224,629,1001,223,1,223,107,677,226,224,1002,223,2,223,1005,224,644,1001,223,1,223,1107,677,677,224,102,2,223,223,1006,224,659,101,1,223,223,1008,226,226,224,1002,223,2,223,1006,224,674,1001,223,1,223,4,223,99,226]
    print("part 1:")
    intcode = Intcode(input, [1])
    intcode.run_until_halt()
    input = [3,225,1,225,6,6,1100,1,238,225,104,0,1101,65,39,225,2,14,169,224,101,-2340,224,224,4,224,1002,223,8,223,101,7,224,224,1,224,223,223,1001,144,70,224,101,-96,224,224,4,224,1002,223,8,223,1001,224,2,224,1,223,224,223,1101,92,65,225,1102,42,8,225,1002,61,84,224,101,-7728,224,224,4,224,102,8,223,223,1001,224,5,224,1,223,224,223,1102,67,73,224,1001,224,-4891,224,4,224,102,8,223,223,101,4,224,224,1,224,223,223,1102,54,12,225,102,67,114,224,101,-804,224,224,4,224,102,8,223,223,1001,224,3,224,1,224,223,223,1101,19,79,225,1101,62,26,225,101,57,139,224,1001,224,-76,224,4,224,1002,223,8,223,1001,224,2,224,1,224,223,223,1102,60,47,225,1101,20,62,225,1101,47,44,224,1001,224,-91,224,4,224,1002,223,8,223,101,2,224,224,1,224,223,223,1,66,174,224,101,-70,224,224,4,224,102,8,223,223,1001,224,6,224,1,223,224,223,4,223,99,0,0,0,677,0,0,0,0,0,0,0,0,0,0,0,1105,0,99999,1105,227,247,1105,1,99999,1005,227,99999,1005,0,256,1105,1,99999,1106,227,99999,1106,0,265,1105,1,99999,1006,0,99999,1006,227,274,1105,1,99999,1105,1,280,1105,1,99999,1,225,225,225,1101,294,0,0,105,1,0,1105,1,99999,1106,0,300,1105,1,99999,1,225,225,225,1101,314,0,0,106,0,0,1105,1,99999,108,226,226,224,102,2,223,223,1005,224,329,101,1,223,223,1107,226,677,224,1002,223,2,223,1005,224,344,101,1,223,223,8,226,677,224,102,2,223,223,1006,224,359,101,1,223,223,108,677,677,224,1002,223,2,223,1005,224,374,1001,223,1,223,1108,226,677,224,1002,223,2,223,1005,224,389,101,1,223,223,1007,677,677,224,1002,223,2,223,1006,224,404,1001,223,1,223,1108,677,677,224,102,2,223,223,1006,224,419,1001,223,1,223,1008,226,677,224,102,2,223,223,1005,224,434,101,1,223,223,107,677,677,224,102,2,223,223,1006,224,449,1001,223,1,223,1007,226,677,224,102,2,223,223,1005,224,464,101,1,223,223,7,677,226,224,102,2,223,223,1005,224,479,101,1,223,223,1007,226,226,224,102,2,223,223,1005,224,494,101,1,223,223,7,677,677,224,102,2,223,223,1006,224,509,101,1,223,223,1008,677,677,224,1002,223,2,223,1006,224,524,1001,223,1,223,108,226,677,224,1002,223,2,223,1006,224,539,101,1,223,223,8,226,226,224,102,2,223,223,1006,224,554,101,1,223,223,8,677,226,224,102,2,223,223,1005,224,569,1001,223,1,223,1108,677,226,224,1002,223,2,223,1006,224,584,101,1,223,223,1107,677,226,224,1002,223,2,223,1005,224,599,101,1,223,223,107,226,226,224,102,2,223,223,1006,224,614,1001,223,1,223,7,226,677,224,102,2,223,223,1005,224,629,1001,223,1,223,107,677,226,224,1002,223,2,223,1005,224,644,1001,223,1,223,1107,677,677,224,102,2,223,223,1006,224,659,101,1,223,223,1008,226,226,224,1002,223,2,223,1006,224,674,1001,223,1,223,4,223,99,226]
    print("part 2:")
    intcode = Intcode(input, [5])
    intcode.run_until_halt()
